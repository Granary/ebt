#define SJ_VERSION_STRING "0.0"

#include <iostream>
#include <fstream>
#include <string>

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

using namespace std;

/* XXX this is a primitive version of translator-output.cxx from systemtap */
class translator_output {
  std::ostream& o;
  unsigned tablevel;
public:
  translator_output (std::ostream &file) : o(file), tablevel(0) {}

  std::ostream& newline (int indent = 0) {
    tablevel += indent;
    o << "\n";
    for (unsigned i = 0; i < tablevel; i++)
      o << "  ";
    return o;
  }

  std::ostream& line() {
    return o;
  }
};

/* XXX no fancy infrastructure for now */
void emit_dr_client(translator_output& o) {
  o.newline() << "#include \"dr_api.h\"";
  o.newline();

  o.newline() << "static void event_exit(void);";
  o.newline();

  o.newline() << "DR_EXPORT void";
  o.newline() << "dr_init(client_id_t id)";
  o.newline() << "{";
    o.newline(1) << "/* empty client */";
    o.newline() << "dr_register_exit_event(event_exit);";
  o.newline(-1) << "}";
  o.newline();

  o.newline() << "static void";
  o.newline() << "event_exit(void)";
  o.newline() << "{";
    o.newline(1) << "/* empty client */";
  o.newline(-1) << "}";
  o.newline();
}

static void usage(const char *prog_name)
{
  fprintf(stderr,
          "Usage: %s [options]\n"
          "\n"
          "Options and arguments:\n"
          "  -g file : output script to file, instead of stdout\n",
          prog_name);
  exit(1);
}

int main (int argc, char * const argv []) {
  bool gen_file = false;
  char *gen_filename = NULL;

  /* parse options */
  char c;
  while ((c = getopt(argc, argv, "g:")) != -1)
    switch (c) {
    case 'g':
      gen_file = true;
      gen_filename = optarg;
      break;
    default:
      usage(argv[0]);
    }
  if (optind < argc) {
    /* further non-option arguments exist */
    usage(argv[0]);
  }

  ofstream file_out;
  if (gen_file) {
    file_out.open(gen_filename);
    if (!file_out.is_open()) { perror("cannot open output file"); exit(1); }
  }

  translator_output o(gen_file ? file_out : cout);
  o.line() << "/* generated by sj version " << SJ_VERSION_STRING << " */\n";
  emit_dr_client(o);
  if (gen_file) file_out.close();
}
